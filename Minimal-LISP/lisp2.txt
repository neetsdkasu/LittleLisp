
リスト (a . b) ((a . b) . c) (a . (a . b)) etc.
シンボル リスト以外 e.g. a abc 123 + a23 3sa

真 T
偽 nil

リストの略式表記
略式　　　正式
(a)　-> (a . nil)
(a b) -> (a . (b . nil))
(a b c) -> (a . (b . (c . nil)))
(a b c d) -> (a . (b . (c . (d . nil))))
(a b . c) -> (a . (b . c))


関数 atom リストならnil、リスト以外はT
(atom a) / (atom . (a . nil)) -> T
(atom (a . b)) / (atom . ((a . b) . nil)) -> nil

関数 eq ２つの引数(シンボル)が同じならT、違うならF
(eq a a) / (eq . (a . (a . nil))) -> T
(eq a b) / (eq . (a . (b . nil))) -> nil
(eq a (a . b)) / (eq . (a  . ((a . b) . nil))) -> ? undefined

関数 car リストの左側の要素を返す
(car (a . b)) / (car . ((a . b) . nil)) -> a
(car ((a . b) . c))  / (car . (((a . b) . c) . nil)) -> (a . b)
(car a) / (car . (a . nil)) -> ? undefined

関数 cdr リストの最後の要素を返す
(cdr (a . b)) / (cdr . ((a . b) . nil)) -> b
(cdr ((a . b) . c)) / (cdr . (((a . b) . c) . nil)) -> c
(cdr a) / (cdr . (a . nil)) -> ? undefined

関数 cons ２つの値からリストを作る
(cons a b) / (cons . (a . (b . nil))) -> (a . b)
(cons (a . b) c) (cons . ((a . b) . (c . nil)))  -> ((a . b) . c)

特別式 quote 
(quote a) / (quote . (a . nil)) -> a
(quote (a . b)) / (quote . ((a . b) . nil)) -> (a . b)

特別式 cond
(cond (a b))
(cond (a b) (c d))

特別式 lambda
(lambda (a b) c)

特別式 label
(label a b)


-------------------------------------------------------------------------

(cond (T 1) (T 2) (T 3)) -> 1
(cond (nil 1) (T 2) (T 3)) -> 2
(cond (nil 1) (nil 2) (T 3)) -> 3
(cond (T 1) (nil 2) (T 3)) -> 1
(cond (nil 1) (nil 2) (nil 3)) -> nil

(lambda (x) x) -> 手続き


((lambda (x y . z) z) 3 4 5 6) -> (5 6)

((lambda . ((x y . z) . (z . nil))) 3 4 5 6)
((lambda . ((x . (y . z)) . (z . nil))) 3 4 5 6)
((lambda . ((x . (y . z)) . (z . nil))) . (3 . (4 . (5 . (6 . nil)))))

x 3
(y . z) (4 . (5 . (6 . nil)))
y 4
z (5 . (6. nil)) -> (5 6)
